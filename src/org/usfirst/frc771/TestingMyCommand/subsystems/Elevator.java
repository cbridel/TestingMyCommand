package org.usfirst.frc771.TestingMyCommand.subsystems;

import org.usfirst.frc771.TestingMyCommand.Robot;
import org.usfirst.frc771.TestingMyCommand.RobotMap;
import org.usfirst.frc771.TestingMyCommand.commands.DriveCommand;
import org.usfirst.frc771.TestingMyCommand.commands.ElevatorCommand;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.DigitalInput;

public class Elevator extends Subsystem {
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

//     END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
//     BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedControllerGroup SCGelevator = RobotMap.speedControllerGroupElevator;
//    private final DoubleSolenoid elevatorSolenoid1 = RobotMap.elevatorSolenoid1;
//    private final DoubleSolenoid elevatorSolenoid2 = RobotMap.elevatorSolenoid2;
    private final edu.wpi.first.wpilibj.Ultrasonic elevatorUltra1 = RobotMap.elevatorUltra1;
      private final DigitalInput LimitSwitch1 = RobotMap.LimitSwitch1;
//    private final WPI_TalonSRX elevatorMotor1 = RobotMap.elevatorMotor1;
//    private final WPI_TalonSRX elevatorMotor2 = RobotMap.elevatorMotor2;
    
    //THESE VALUES MUST BE CHANGED %
    double backLimit = 0.0;
    int flag = 0;
    boolean boo = true;
    
	@Override
	protected void initDefaultCommand() {
		setDefaultCommand(new ElevatorCommand());
		// TODO Auto-generated method stub
		
	}
	
	public boolean getLimit(){
		return !LimitSwitch1.get();
	}
	
	public void elevatorCommand(){
		Joystick elevatorJoystick = Robot.oi.joystickOperator;
		double y = (double) elevatorJoystick.getRawAxis(1);
		SCGelevator.set(deadBand(y, 0.08));
	}
	
	public double deadBand(double value, double limit){
		if (value > limit){
			return 1;
		}else if (value < -limit){
			return -1;
		}else{
			return 0;
		}
	}
	
	public void elevatorExtend(){
//		elevatorSolenoid1.set(DoubleSolenoid.Value.kForward); 
//	  	elevatorSolenoid2.set(DoubleSolenoid.Value.kForward);
	}
	
	public void elevatorRetract(){
//		elevatorSolenoid1.set(DoubleSolenoid.Value.kReverse);
//		elevatorSolenoid2.set(DoubleSolenoid.Value.kReverse);
	}
	
	public boolean getDistance(){
		if (elevatorUltra1.getRangeInches() < backLimit){
			return true;
		}else{
			return false;
		}
	}

	public void setElevator(double value){
//		elevatorMotor1.set(value);
//		elevatorMotor2.set(value);
	}
	
	public void elevatorCrucifixion(){
		if(!Robot.elevator.getLimit()){
//			elevatorMotor1.set(-0.5);
//			elevatorMotor2.set(-0.5);
		}else{
//			elevatorMotor1.set(0);
//			elevatorMotor2.set(0);
		}
	}

	public void setBoo(boolean tf){
		boo = !tf;
	}
	
	public boolean getBoo(){
		return boo;
	}
	
	public void setElevatorFlag(int value){
		flag = value;
		
	}
    public int getElevatorFlag(){
    	return flag;
    }
}
