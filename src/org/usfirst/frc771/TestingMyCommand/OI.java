// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc771.TestingMyCommand;

import org.usfirst.frc771.TestingMyCommand.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystickDriver;
    public Joystick joystickOperator;
    public JoystickButton dA;
    public JoystickButton dB;
    public JoystickButton dL;
    public JoystickButton dR;
    public JoystickButton oA;
    public JoystickButton oL;
    public JoystickButton oR;
    public JoystickButton oY;
    public JoystickButton oBack;
    public JoystickButton oStart;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickOperator = new Joystick(1);
        
        joystickDriver = new Joystick(0);
        
 
        oA = new JoystickButton(joystickOperator, 1);
        oA.whenPressed(new ZCommand1());
//        dA = new JoystickButton(joystickDriver, 1);
//        dA.whenPressed(new GyroDrive());
//        dB = new JoystickButton(joystickDriver, 2);
//        dB.whenPressed(new GyroKill());
//        dL = new JoystickButton(joystickDriver, 5);
//        dL.whenPressed(new gearUpShift());
//        dR = new JoystickButton(joystickDriver, 6);
//        dR.whenPressed(new gearDownShift());
//        oA = new JoystickButton(joystickOperator, 1);
//        oA.whileHeld(new PacmanEats());
//        oB = new JoystickButton(joystickOperator, 2);
//        oB.whileHeld(new PacmanPukesSlow());
//        oX = new JoystickButton(joystickOperator, 3);
//        oX.whileHeld(new PacmanPukesFast());
//        oY = new JoystickButton(joystickOperator, 4);
//        oY.whenPressed(new killIntake());
//        oL = new JoystickButton(joystickOperator, 5);
//        oL.whenPressed(new elevatorCrucifixion());
//        oR = new JoystickButton(joystickOperator, 6);
//        oR.whenPressed(new ElevatorExtend());
//        oBack = new JoystickButton(joystickOperator, 7);
//        oBack.whileHeld(new PacmanEats());
//        oStart = new JoystickButton(joystickOperator, 8);
//        oStart.whenPressed(new PlatformCG());
        
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Drive Command", new DriveCommand());
        SmartDashboard.putData("Command 1", new ZCommand1());
        SmartDashboard.putData("PlatformCommand", new PlatformCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickDriver() {
        return joystickDriver;
    }

    public Joystick getJoystickOperator() {
        return joystickOperator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

